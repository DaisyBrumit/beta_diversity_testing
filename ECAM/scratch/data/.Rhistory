plot_file <- '~/beta_diversity_testing/plots/pcoa_plots.pdf'
pdf(plot_file)
par(mfrow = c(2, 2)) # create pages with 4 plots each (2x2)
for (study in studyList) {
setwd(paste0('~/beta_diversity_testing/',study))
getwd() # sanity check
### METADATA HANDLING: ONLY ONCE PER STUDY
# read in metadata
meta <- read.table('meta.txt', header = TRUE, sep = '\t') %>%
filter(!rowSums(is.na(.) | . == "") == ncol(.)) # filter out rows with all na or empty values
# select binary column for plotting later
if(study == 'Zeller') {meta_col <- 'geographic_location'
colors <- c("Germany" = "pink", "France" = "darkgreen")
} else if(study == 'Jones') {meta_col <- 'type'
colors <- c("STOOL" = "pink", "SWAB" = "darkgreen")
} else if(study == 'gemelli_ECAM') {meta_col <- 'delivery'
colors <- c("vaginal" = "pink", "cesarean" = "darkgreen")
} else if(study == 'Vangay') {meta_col <- 'Breastfed'
colors <- c("N" = "pink", "Y" = "darkgreen")
} else if(study == 'Noguera-Julian') {meta_col <- 'HIV_serostatus'
colors <- c("positive" = "pink", "negative" = "darkgreen")}
# finally, drop all rows where the specified feature is missing data
meta <- meta[!is.na(meta[meta_col]), ]
# find all distance matrix files for this study
files <- list.files(pattern = 'ordinations.tsv', recursive = FALSE)
# need to run pcoa and plot for each file
for (file in files){
# save actual beta method as a string
beta_method <- sub("_ordinations.tsv", "", file) # remove suffix
print(paste("Beta Method for", study, "=", beta_method)) #sanity check
# read in data as a table
data <- read.table(file, header=TRUE, sep='\t')
# row 1 contains proportion var explained
prop_exp <- data[1,]
# isolate percent var explained and assign indices
colnames(data) <- sub("^X", "", colnames(data)) # list of new colnames
row.names(data) <- data[[1]] # assign dist matrix row names
data <- data[-1,] # we don't need prop explained here anymore
data <- data[,-1] # don't need index values as a column, either
# prep data for pcoa and plotting: meta and data must share id's
# filter samples not shared by meta and data
shared.indices <- intersect(meta$sampleid, rownames(data))
data <- data %>% filter(rownames(data) %in% shared.indices)
meta <- meta %>% filter(meta$sampleid %in% shared.indices)
# Create the scatter plot
plot.table <- data.frame(meta_col=as.factor(meta[[meta_col]]),
MDS1=data$PC1,
MDS2=data$PC2,
row.names=row.names(meta))
x.lab <- paste("MDS1:",as.character(round(prop_exp[2], digits=4))) # print first 4 decimals
y.lab <- paste("MDS2:",as.character(round(prop_exp[3], digits=4))) # print first 4 decimals
plot(plot.table$MDS1, plot.table$MDS2, pch = 19, col = colors[plot.table$meta_col],
xlab = x.lab, ylab = y.lab) # main plot with axes
title(main = paste(study, beta_method, "PCOA Results"), line = 1) # title
legend("topright", legend = levels(as.factor(meta[[meta_col]])), fill = colors, title = meta_col) # add legend
}
}
dev.off()
# RUN PCOA ON DATASETS TO COMPARE CLUMPING
# ACROSS RPCA/PHYLO-RPCA
library(vegan)
library(tidyverse)
rm(list = ls())
studyList <- c('Zeller', 'Jones', 'Vangay', 'Noguera-Julian', 'gemelli_ECAM')
qiime.list <- c('ctf', 'phylo_ctf', 'rpca', 'phylo_rpca')
# prep this study's pcoa plot file
plot_file <- '~/beta_diversity_testing/plots/pcoa_plots.pdf'
pdf(plot_file)
par(mfrow = c(2, 2)) # create pages with 4 plots each (2x2)
for (study in studyList) {
setwd(paste0('~/beta_diversity_testing/',study))
getwd() # sanity check
### METADATA HANDLING: ONLY ONCE PER STUDY
# read in metadata
meta <- read.table('meta.txt', header = TRUE, sep = '\t') %>%
filter(!rowSums(is.na(.) | . == "") == ncol(.)) # filter out rows with all na or empty values
# select binary column for plotting later
if(study == 'Zeller') {meta_col <- 'geographic_location'
colors <- c("Germany" = "pink", "France" = "darkgreen")
} else if(study == 'Jones') {meta_col <- 'Genotype'
colors <- c("GG" = "pink", "GA" = "darkgreen")
} else if(study == 'gemelli_ECAM') {meta_col <- 'delivery'
colors <- c("vaginal" = "pink", "cesarean" = "darkgreen")
} else if(study == 'Vangay') {meta_col <- 'Breastfed'
colors <- c("N" = "pink", "Y" = "darkgreen")
} else if(study == 'Noguera-Julian') {meta_col <- 'HIV_serostatus'
colors <- c("positive" = "pink", "negative" = "darkgreen")}
# finally, drop all rows where the specified feature is missing data
meta <- meta[!is.na(meta[meta_col]), ]
# find all distance matrix files for this study
files <- list.files(pattern = 'ordinations.tsv', recursive = FALSE)
# need to run pcoa and plot for each file
for (file in files){
# save actual beta method as a string
beta_method <- sub("_ordinations.tsv", "", file) # remove suffix
print(paste("Beta Method for", study, "=", beta_method)) #sanity check
# read in data as a table
data <- read.table(file, header=TRUE, sep='\t')
# row 1 contains proportion var explained
prop_exp <- data[1,]
# isolate percent var explained and assign indices
colnames(data) <- sub("^X", "", colnames(data)) # list of new colnames
row.names(data) <- data[[1]] # assign dist matrix row names
data <- data[-1,] # we don't need prop explained here anymore
data <- data[,-1] # don't need index values as a column, either
# prep data for pcoa and plotting: meta and data must share id's
# filter samples not shared by meta and data
shared.indices <- intersect(meta$sampleid, rownames(data))
data <- data %>% filter(rownames(data) %in% shared.indices)
meta <- meta %>% filter(meta$sampleid %in% shared.indices)
# Create the scatter plot
plot.table <- data.frame(meta_col=as.factor(meta[[meta_col]]),
MDS1=data$PC1,
MDS2=data$PC2,
row.names=row.names(meta))
x.lab <- paste("MDS1:",as.character(round(prop_exp[2], digits=4))) # print first 4 decimals
y.lab <- paste("MDS2:",as.character(round(prop_exp[3], digits=4))) # print first 4 decimals
plot(plot.table$MDS1, plot.table$MDS2, pch = 19, col = colors[plot.table$meta_col],
xlab = x.lab, ylab = y.lab) # main plot with axes
title(main = paste(study, beta_method, "PCOA Results"), line = 1) # title
legend("topright", legend = levels(as.factor(meta[[meta_col]])), fill = colors, title = meta_col) # add legend
}
}
dev.off()
# RUN PCOA ON DATASETS TO COMPARE CLUMPING
# ACROSS RPCA/PHYLO-RPCA
library(vegan)
library(tidyverse)
rm(list = ls())
studyList <- c('Zeller', 'Jones', 'Vangay', 'Noguera-Julian', 'gemelli_ECAM')
qiime.list <- c('ctf', 'phylo_ctf', 'rpca', 'phylo_rpca')
# prep this study's pcoa plot file
plot_file <- '~/beta_diversity_testing/plots/pcoa_plots.pdf'
pdf(plot_file)
par(mfrow = c(2, 2)) # create pages with 4 plots each (2x2)
for (study in studyList) {
setwd(paste0('~/beta_diversity_testing/',study))
getwd() # sanity check
### METADATA HANDLING: ONLY ONCE PER STUDY
# read in metadata
meta <- read.table('meta.txt', header = TRUE, sep = '\t') %>%
filter(!rowSums(is.na(.) | . == "") == ncol(.)) # filter out rows with all na or empty values
# select binary column for plotting later
if(study == 'Zeller') {meta_col <- 'geographic_location'
colors <- c("Germany" = "pink", "France" = "darkgreen")
} else if(study == 'Jones') {meta_col <- 'Treatment'
colors <- c("Mag" = "pink", "Placebo" = "darkgreen")
} else if(study == 'gemelli_ECAM') {meta_col <- 'delivery'
colors <- c("vaginal" = "pink", "cesarean" = "darkgreen")
} else if(study == 'Vangay') {meta_col <- 'Breastfed'
colors <- c("N" = "pink", "Y" = "darkgreen")
} else if(study == 'Noguera-Julian') {meta_col <- 'HIV_serostatus'
colors <- c("positive" = "pink", "negative" = "darkgreen")}
# finally, drop all rows where the specified feature is missing data
meta <- meta[!is.na(meta[meta_col]), ]
# find all distance matrix files for this study
files <- list.files(pattern = 'ordinations.tsv', recursive = FALSE)
# need to run pcoa and plot for each file
for (file in files){
# save actual beta method as a string
beta_method <- sub("_ordinations.tsv", "", file) # remove suffix
print(paste("Beta Method for", study, "=", beta_method)) #sanity check
# read in data as a table
data <- read.table(file, header=TRUE, sep='\t')
# row 1 contains proportion var explained
prop_exp <- data[1,]
# isolate percent var explained and assign indices
colnames(data) <- sub("^X", "", colnames(data)) # list of new colnames
row.names(data) <- data[[1]] # assign dist matrix row names
data <- data[-1,] # we don't need prop explained here anymore
data <- data[,-1] # don't need index values as a column, either
# prep data for pcoa and plotting: meta and data must share id's
# filter samples not shared by meta and data
shared.indices <- intersect(meta$sampleid, rownames(data))
data <- data %>% filter(rownames(data) %in% shared.indices)
meta <- meta %>% filter(meta$sampleid %in% shared.indices)
# Create the scatter plot
plot.table <- data.frame(meta_col=as.factor(meta[[meta_col]]),
MDS1=data$PC1,
MDS2=data$PC2,
row.names=row.names(meta))
x.lab <- paste("MDS1:",as.character(round(prop_exp[2], digits=4))) # print first 4 decimals
y.lab <- paste("MDS2:",as.character(round(prop_exp[3], digits=4))) # print first 4 decimals
plot(plot.table$MDS1, plot.table$MDS2, pch = 19, col = colors[plot.table$meta_col],
xlab = x.lab, ylab = y.lab) # main plot with axes
title(main = paste(study, beta_method, "PCOA Results"), line = 1) # title
legend("topright", legend = levels(as.factor(meta[[meta_col]])), fill = colors, title = meta_col) # add legend
}
}
dev.off()
# RUN PCOA ON DATASETS TO COMPARE CLUMPING
# ACROSS RPCA/PHYLO-RPCA
# SPECIFIC TO HA DATASETS
# ADAPTED FROM ../3.1_comparePCOA.R
library(vegan)
library(tidyverse)
rm(list = ls())
studyList <- c('Zeller', 'Jones', 'Vangay', 'Noguera-Julian', 'gemelli_ECAM')
qiime.list <- c('ctf_2', 'phylo_ctf_2', 'rpca_2', 'phylo_rpca_2',
'ctf_5', 'phylo_ctf_5', 'rpca_5', 'phylo_rpca_5',
'ctf_8', 'phylo_ctf_8', 'rpca_8', 'phylo_rpca_8',
'ctf_10', 'phylo_ctf_10', 'rpca_10', 'phylo_rpca_10')
# prep this study's pcoa plot file
plot_file <- '~/beta_diversity_testing/plots/pcoa_plots_HA.pdf'
pdf(plot_file)
par(mfrow = c(2, 2)) # create pages with 4 plots each (2x2)
for (study in studyList) {
setwd(paste0('~/beta_diversity_testing/',study,'/high_abundance/'))
getwd() # sanity check
### METADATA HANDLING: ONLY ONCE PER STUDY
# read in metadata
meta <- read.table('../meta.txt', header = TRUE, sep = '\t') %>%
filter(!rowSums(is.na(.) | . == "") == ncol(.)) # filter out rows with all na or empty values
# select binary column for plotting later
if(study == 'Zeller') {meta_col <- 'geographic_location'
colors <- c("Germany" = "pink", "France" = "darkgreen")
} else if(study == 'Jones') {meta_col <- 'Genotype'
colors <- c("GG" = "pink", "GA" = "darkgreen")
} else if(study == 'gemelli_ECAM') {meta_col <- 'delivery'
colors <- c("vaginal" = "pink", "cesarean" = "darkgreen")
} else if(study == 'Vangay') {meta_col <- 'Breastfed'
colors <- c("N" = "pink", "Y" = "darkgreen")
} else if(study == 'Noguera-Julian') {meta_col <- 'HIV_serostatus'
colors <- c("positive" = "pink", "negative" = "darkgreen")}
# finally, drop all rows where the specified feature is missing data
meta <- meta[!is.na(meta[meta_col]), ]
# find all distance matrix files for this study
files <- list.files(pattern = 'ordinations.tsv', recursive = FALSE)
# need to run pcoa and plot for each file
for (file in files){
# using filename, save actual beta method as a string
beta_method <- sub("_ordinations.tsv", "", file) # remove suffix
print(paste("Beta Method for", study, "=", beta_method)) #sanity check
# read in data as a table
data <- read.table(file, header=TRUE, sep='\t')
# row 1 contains proportion var explained
prop_exp <- data[1,]
# isolate percent var explained and assign indices
colnames(data) <- sub("^X", "", colnames(data)) # list of new colnames
row.names(data) <- data[[1]] # assign dist matrix row names
data <- data[-1,] # we don't need prop explained here anymore
data <- data[,-1] # don't need index values as a column, either
# prep data for pcoa and plotting: meta and data must share id's
# filter samples not shared by meta and data
shared.indices <- intersect(meta$sampleid, rownames(data))
data <- data %>% filter(rownames(data) %in% shared.indices)
meta <- meta %>% filter(meta$sampleid %in% shared.indices)
# Create the scatter plot
plot.table <- data.frame(meta_col=as.factor(meta[[meta_col]]),
MDS1=data$PC1,
MDS2=data$PC2,
row.names=row.names(meta))
x.lab <- paste("MDS1:",as.character(round(prop_exp[2], digits=4))) # print first 4 decimals
y.lab <- paste("MDS2:",as.character(round(prop_exp[3], digits=4))) # print first 4 decimals
plot(plot.table$MDS1, plot.table$MDS2, pch = 19, col = colors[plot.table$meta_col],
xlab = x.lab, ylab = y.lab) # main plot with axes
title(main = paste(study, beta_method, "PCOA Results"), line = 1) # title
legend("topright", legend = levels(as.factor(plot.table[[meta_col]])), fill = colors, title = meta_col) # add legend
}
}
View(plot.table)
# RUN PCOA ON DATASETS TO COMPARE CLUMPING
# ACROSS RPCA/PHYLO-RPCA
library(vegan)
library(tidyverse)
rm(list = ls())
studyList <- c('Zeller', 'Jones', 'Vangay', 'Noguera-Julian', 'gemelli_ECAM')
qiime.list <- c('ctf', 'phylo_ctf', 'rpca', 'phylo_rpca')
# prep this study's pcoa plot file
plot_file <- '~/beta_diversity_testing/plots/pcoa_plots.pdf'
pdf(plot_file)
par(mfrow = c(2, 2)) # create pages with 4 plots each (2x2)
for (study in studyList) {
setwd(paste0('~/beta_diversity_testing/',study))
getwd() # sanity check
### METADATA HANDLING: ONLY ONCE PER STUDY
# read in metadata
meta <- read.table('meta.txt', header = TRUE, sep = '\t') %>%
filter(!rowSums(is.na(.) | . == "") == ncol(.)) # filter out rows with all na or empty values
# select binary column for plotting later
if(study == 'Zeller') {meta_col <- 'geographic_location'
colors <- c("Germany" = "pink", "France" = "darkgreen")
} else if(study == 'Jones') {meta_col <- 'Genotype'
colors <- c("GG" = "pink", "GA" = "darkgreen")
} else if(study == 'gemelli_ECAM') {meta_col <- 'delivery'
colors <- c("vaginal" = "pink", "cesarean" = "darkgreen")
} else if(study == 'Vangay') {meta_col <- 'Breastfed'
colors <- c("N" = "pink", "Y" = "darkgreen")
} else if(study == 'Noguera-Julian') {meta_col <- 'HIV_serostatus'
colors <- c("positive" = "pink", "negative" = "darkgreen")}
# finally, drop all rows where the specified feature is missing data
meta <- meta[!is.na(meta[meta_col]), ]
# find all distance matrix files for this study
files <- list.files(pattern = 'ordinations.tsv', recursive = FALSE)
# need to run pcoa and plot for each file
for (file in files){
# save actual beta method as a string
beta_method <- sub("_ordinations.tsv", "", file) # remove suffix
print(paste("Beta Method for", study, "=", beta_method)) #sanity check
# read in data as a table
data <- read.table(file, header=TRUE, sep='\t')
# row 1 contains proportion var explained
prop_exp <- data[1,]
# isolate percent var explained and assign indices
colnames(data) <- sub("^X", "", colnames(data)) # list of new colnames
row.names(data) <- data[[1]] # assign dist matrix row names
data <- data[-1,] # we don't need prop explained here anymore
data <- data[,-1] # don't need index values as a column, either
# prep data for pcoa and plotting: meta and data must share id's
# filter samples not shared by meta and data
shared.indices <- intersect(meta$sampleid, rownames(data))
data <- data %>% filter(rownames(data) %in% shared.indices)
meta <- meta %>% filter(meta$sampleid %in% shared.indices)
# Create the scatter plot
plot.table <- data.frame(meta_col=as.factor(meta[[meta_col]]),
MDS1=data$PC1,
MDS2=data$PC2,
row.names=row.names(meta))
x.lab <- paste("MDS1:",as.character(round(prop_exp[2], digits=4))) # print first 4 decimals
y.lab <- paste("MDS2:",as.character(round(prop_exp[3], digits=4))) # print first 4 decimals
plot(plot.table$MDS1, plot.table$MDS2, pch = 19, col = colors[plot.table$meta_col],
xlab = x.lab, ylab = y.lab) # main plot with axes
title(main = paste(study, beta_method, "PCOA Results"), line = 1) # title
legend("topright", legend = levels(as.factor(meta[[meta_col]])), fill = colors, title = meta_col) # add legend
}
}
dev.off()
dev.off()
# RUN PCOA ON DATASETS TO COMPARE CLUMPING
# ACROSS RPCA/PHYLO-RPCA
library(vegan)
library(tidyverse)
rm(list = ls())
studyList <- c('Zeller', 'Jones', 'Vangay', 'Noguera-Julian', 'gemelli_ECAM')
qiime.list <- c('ctf', 'phylo_ctf', 'rpca', 'phylo_rpca')
# prep this study's pcoa plot file
plot_file <- '~/beta_diversity_testing/plots/pcoa_plots.pdf'
pdf(plot_file)
par(mfrow = c(2, 2)) # create pages with 4 plots each (2x2)
for (study in studyList) {
setwd(paste0('~/beta_diversity_testing/',study))
getwd() # sanity check
### METADATA HANDLING: ONLY ONCE PER STUDY
# read in metadata
meta <- read.table('meta.txt', header = TRUE, sep = '\t') %>%
filter(!rowSums(is.na(.) | . == "") == ncol(.)) # filter out rows with all na or empty values
# select binary column for plotting later
if(study == 'Zeller') {meta_col <- 'geographic_location'
colors <- c("Germany" = "pink", "France" = "darkgreen")
} else if(study == 'Jones') {meta_col <- 'Genotype'
colors <- c("GG" = "pink", "GA" = "darkgreen")
} else if(study == 'gemelli_ECAM') {meta_col <- 'delivery'
colors <- c("vaginal" = "pink", "cesarean" = "darkgreen")
} else if(study == 'Vangay') {meta_col <- 'Breastfed'
colors <- c("N" = "pink", "Y" = "darkgreen")
} else if(study == 'Noguera-Julian') {meta_col <- 'HIV_serostatus'
colors <- c("positive" = "pink", "negative" = "darkgreen")}
# finally, drop all rows where the specified feature is missing data
meta <- meta[!is.na(meta[meta_col]), ]
# find all distance matrix files for this study
files <- list.files(pattern = 'ordinations.tsv', recursive = FALSE)
# need to run pcoa and plot for each file
for (file in files){
# save actual beta method as a string
beta_method <- sub("_ordinations.tsv", "", file) # remove suffix
print(paste("Beta Method for", study, "=", beta_method)) #sanity check
# read in data as a table
data <- read.table(file, header=TRUE, sep='\t')
# row 1 contains proportion var explained
prop_exp <- data[1,]
# isolate percent var explained and assign indices
colnames(data) <- sub("^X", "", colnames(data)) # list of new colnames
row.names(data) <- data[[1]] # assign dist matrix row names
data <- data[-1,] # we don't need prop explained here anymore
data <- data[,-1] # don't need index values as a column, either
# prep data for pcoa and plotting: meta and data must share id's
# filter samples not shared by meta and data
shared.indices <- intersect(meta$sampleid, rownames(data))
data <- data %>% filter(rownames(data) %in% shared.indices)
meta <- meta %>% filter(meta$sampleid %in% shared.indices)
# Create the scatter plot
plot.table <- data.frame(meta_col=as.factor(meta[[meta_col]]),
MDS1=data$PC1,
MDS2=data$PC2,
row.names=row.names(meta))
x.lab <- paste("MDS1:",as.character(round(prop_exp[2], digits=4))) # print first 4 decimals
y.lab <- paste("MDS2:",as.character(round(prop_exp[3], digits=4))) # print first 4 decimals
plot(plot.table$MDS1, plot.table$MDS2, pch = 19, col = colors[plot.table$meta_col],
xlab = x.lab, ylab = y.lab) # main plot with axes
title(main = paste(study, beta_method, "PCOA Results"), line = 1) # title
legend("topright", legend = levels(as.factor(meta[[meta_col]])), fill = colors, title = meta_col) # add legend
}
}
dev.off()
# RUN PCOA ON DATASETS TO COMPARE CLUMPING
# ACROSS RPCA/PHYLO-RPCA
# SPECIFIC TO HA DATASETS
# ADAPTED FROM ../3.1_comparePCOA.R
library(vegan)
library(tidyverse)
rm(list = ls())
studyList <- c('Zeller', 'Jones', 'Vangay', 'Noguera-Julian', 'gemelli_ECAM')
qiime.list <- c('ctf_2', 'phylo_ctf_2', 'rpca_2', 'phylo_rpca_2',
'ctf_5', 'phylo_ctf_5', 'rpca_5', 'phylo_rpca_5',
'ctf_8', 'phylo_ctf_8', 'rpca_8', 'phylo_rpca_8',
'ctf_10', 'phylo_ctf_10', 'rpca_10', 'phylo_rpca_10')
# prep this study's pcoa plot file
plot_file <- '~/beta_diversity_testing/plots/pcoa_plots_HA.pdf'
pdf(plot_file)
par(mfrow = c(2, 2)) # create pages with 4 plots each (2x2)
for (study in studyList) {
setwd(paste0('~/beta_diversity_testing/',study,'/high_abundance/'))
getwd() # sanity check
### METADATA HANDLING: ONLY ONCE PER STUDY
# read in metadata
meta <- read.table('../meta.txt', header = TRUE, sep = '\t') %>%
filter(!rowSums(is.na(.) | . == "") == ncol(.)) # filter out rows with all na or empty values
# select binary column for plotting later
if(study == 'Zeller') {meta_col <- 'geographic_location'
colors <- c("Germany" = "pink", "France" = "darkgreen")
} else if(study == 'Jones') {meta_col <- 'Genotype'
colors <- c("GG" = "pink", "GA" = "darkgreen")
} else if(study == 'gemelli_ECAM') {meta_col <- 'delivery'
colors <- c("vaginal" = "pink", "cesarean" = "darkgreen")
} else if(study == 'Vangay') {meta_col <- 'Breastfed'
colors <- c("N" = "pink", "Y" = "darkgreen")
} else if(study == 'Noguera-Julian') {meta_col <- 'HIV_serostatus'
colors <- c("positive" = "pink", "negative" = "darkgreen")}
# finally, drop all rows where the specified feature is missing data
meta <- meta[!is.na(meta[meta_col]), ]
# find all distance matrix files for this study
files <- list.files(pattern = 'ordinations.tsv', recursive = FALSE)
# need to run pcoa and plot for each file
for (file in files){
# using filename, save actual beta method as a string
beta_method <- sub("_ordinations.tsv", "", file) # remove suffix
print(paste("Beta Method for", study, "=", beta_method)) #sanity check
# read in data as a table
data <- read.table(file, header=TRUE, sep='\t')
# row 1 contains proportion var explained
prop_exp <- data[1,]
# isolate percent var explained and assign indices
colnames(data) <- sub("^X", "", colnames(data)) # list of new colnames
row.names(data) <- data[[1]] # assign dist matrix row names
data <- data[-1,] # we don't need prop explained here anymore
data <- data[,-1] # don't need index values as a column, either
# prep data for pcoa and plotting: meta and data must share id's
# filter samples not shared by meta and data
shared.indices <- intersect(meta$sampleid, rownames(data))
data <- data %>% filter(rownames(data) %in% shared.indices)
meta <- meta %>% filter(meta$sampleid %in% shared.indices)
# Create the scatter plot
plot.table <- data.frame(meta_col=as.factor(meta[[meta_col]]),
MDS1=data$PC1,
MDS2=data$PC2,
row.names=row.names(meta))
x.lab <- paste("MDS1:",as.character(round(prop_exp[2], digits=4))) # print first 4 decimals
y.lab <- paste("MDS2:",as.character(round(prop_exp[3], digits=4))) # print first 4 decimals
plot(plot.table$MDS1, plot.table$MDS2, pch = 19, col = colors[plot.table$meta_col],
xlab = x.lab, ylab = y.lab) # main plot with axes
title(main = paste(study, beta_method, "PCOA Results"), line = 1) # title
legend("topright", legend = levels(as.factor(meta[[meta_col]])), fill = colors, title = meta_col) # add legend
}
}
dev.off()
rm(list=ls())
library(vegan)
library(tidyverse)
# meta_from_files: isolates metadata from filenames
get_beta <- function(file) {
# make a list of all keywords that need to be removed
bad.words <- c('distance', 'matrix', 'ordinations', 'permanova', 'results',
'ords', 'with', 'meta', 'fromBiplot')
beta.list <- c() # init empty list to contain multi-word metrics
# break up file name into a string
file.str <- sub('.tsv','',file) # remove suffix
file.list <- as.list(strsplit(file.str,"-")[[1]]) # break up the file string into parts
# remove any taxa integers or additional labels
for(x in file.list){
# translated: if x NOT in bad.words, and if x is not a number
if(!(x %in% bad.words) && (is.na(as.numeric(x)))){
beta.list <- append(beta.list, x)
}
}
beta.str <- paste(beta.list, collapse = "-")
return(beta.str)
}
qiimeList <- c('phylo_rpca', 'phylo_ctf', 'rpca', 'ctf')
setwd(~/beta_diversity_testing/gemelli_ECAM/scratch/data)
setwd('~/beta_diversity_testing/gemelli_ECAM/scratch/data')
getwd() # sanity check
df <- read.table('permanova.tsv')
View(df)
plot<-ggplot(df, aes(x=method,y=score)) + geom(boxplot) + labs(title='Rarefied EXAM Psuedo-F')
plot<-ggplot(df, aes(x=method,y=score)) + geom_boxplot + labs(title='Rarefied EXAM Psuedo-F')
plot<-ggplot(df, aes(x=method,y=score)) + geom_boxplot() + labs(title='Rarefied EXAM Psuedo-F')
print(plot)
View(df)
### METADATA HANDLING: ONLY ONCE PER STUDY
# read in metadata
meta_init <- read.csv('rare_meta.tsv', sep='\t', header = TRUE,
check.names = FALSE)
df <- read.table('permanova.tsv')
### METADATA HANDLING: ONLY ONCE PER STUDY
# read in metadata
meta_init <- read.csv('rare_meta.tsv', sep='\t', header = TRUE,
check.names = FALSE)
plot<-ggplot(df, aes(x=method,y=score)) + geom_boxplot() + labs(title='Rarefied EXAM Psuedo-F')
print(plot)
df <- read.table('permanova.tsv')
plot<-ggplot(df, aes(x=method,y=score)) + geom_boxplot() + labs(title='Rarefied EXAM Psuedo-F')
print(plot)
